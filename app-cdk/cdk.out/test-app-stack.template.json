{
 "Resources": {
  "testVpc4D2DC201": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "test-app-stack/test-Vpc"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/Resource"
   }
  },
  "testVpcPublicSubnet1SubnetEE5AC508": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.0.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "test-app-stack/test-Vpc/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "testVpc4D2DC201"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PublicSubnet1/Subnet"
   }
  },
  "testVpcPublicSubnet1RouteTable7C020A14": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "test-app-stack/test-Vpc/PublicSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "testVpc4D2DC201"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PublicSubnet1/RouteTable"
   }
  },
  "testVpcPublicSubnet1RouteTableAssociationB461B106": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "testVpcPublicSubnet1RouteTable7C020A14"
    },
    "SubnetId": {
     "Ref": "testVpcPublicSubnet1SubnetEE5AC508"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PublicSubnet1/RouteTableAssociation"
   }
  },
  "testVpcPublicSubnet1DefaultRoute4E533896": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "testVpcIGWFEA83CE2"
    },
    "RouteTableId": {
     "Ref": "testVpcPublicSubnet1RouteTable7C020A14"
    }
   },
   "DependsOn": [
    "testVpcVPCGWBF407B7A"
   ],
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PublicSubnet1/DefaultRoute"
   }
  },
  "testVpcPublicSubnet1EIP453F05A2": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "test-app-stack/test-Vpc/PublicSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PublicSubnet1/EIP"
   }
  },
  "testVpcPublicSubnet1NATGateway881E2DCC": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "testVpcPublicSubnet1EIP453F05A2",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "testVpcPublicSubnet1SubnetEE5AC508"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "test-app-stack/test-Vpc/PublicSubnet1"
     }
    ]
   },
   "DependsOn": [
    "testVpcPublicSubnet1DefaultRoute4E533896",
    "testVpcPublicSubnet1RouteTableAssociationB461B106"
   ],
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PublicSubnet1/NATGateway"
   }
  },
  "testVpcPublicSubnet2Subnet51F857D4": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.64.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "test-app-stack/test-Vpc/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "testVpc4D2DC201"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PublicSubnet2/Subnet"
   }
  },
  "testVpcPublicSubnet2RouteTableAC693F0D": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "test-app-stack/test-Vpc/PublicSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "testVpc4D2DC201"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PublicSubnet2/RouteTable"
   }
  },
  "testVpcPublicSubnet2RouteTableAssociationE8652677": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "testVpcPublicSubnet2RouteTableAC693F0D"
    },
    "SubnetId": {
     "Ref": "testVpcPublicSubnet2Subnet51F857D4"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PublicSubnet2/RouteTableAssociation"
   }
  },
  "testVpcPublicSubnet2DefaultRouteE5E707A9": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "testVpcIGWFEA83CE2"
    },
    "RouteTableId": {
     "Ref": "testVpcPublicSubnet2RouteTableAC693F0D"
    }
   },
   "DependsOn": [
    "testVpcVPCGWBF407B7A"
   ],
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PublicSubnet2/DefaultRoute"
   }
  },
  "testVpcPublicSubnet2EIP10B1BCC5": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "test-app-stack/test-Vpc/PublicSubnet2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PublicSubnet2/EIP"
   }
  },
  "testVpcPublicSubnet2NATGateway7A297E8F": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "testVpcPublicSubnet2EIP10B1BCC5",
      "AllocationId"
     ]
    },
    "SubnetId": {
     "Ref": "testVpcPublicSubnet2Subnet51F857D4"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "test-app-stack/test-Vpc/PublicSubnet2"
     }
    ]
   },
   "DependsOn": [
    "testVpcPublicSubnet2DefaultRouteE5E707A9",
    "testVpcPublicSubnet2RouteTableAssociationE8652677"
   ],
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PublicSubnet2/NATGateway"
   }
  },
  "testVpcPrivateSubnet1SubnetF113C9EA": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.128.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "test-app-stack/test-Vpc/PrivateSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "testVpc4D2DC201"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PrivateSubnet1/Subnet"
   }
  },
  "testVpcPrivateSubnet1RouteTableE909A9E4": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "test-app-stack/test-Vpc/PrivateSubnet1"
     }
    ],
    "VpcId": {
     "Ref": "testVpc4D2DC201"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PrivateSubnet1/RouteTable"
   }
  },
  "testVpcPrivateSubnet1RouteTableAssociation2906E079": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "testVpcPrivateSubnet1RouteTableE909A9E4"
    },
    "SubnetId": {
     "Ref": "testVpcPrivateSubnet1SubnetF113C9EA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PrivateSubnet1/RouteTableAssociation"
   }
  },
  "testVpcPrivateSubnet1DefaultRoute21E55BBC": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "testVpcPublicSubnet1NATGateway881E2DCC"
    },
    "RouteTableId": {
     "Ref": "testVpcPrivateSubnet1RouteTableE909A9E4"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PrivateSubnet1/DefaultRoute"
   }
  },
  "testVpcPrivateSubnet2Subnet5D361033": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.192.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "test-app-stack/test-Vpc/PrivateSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "testVpc4D2DC201"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PrivateSubnet2/Subnet"
   }
  },
  "testVpcPrivateSubnet2RouteTable11B7DEB0": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "test-app-stack/test-Vpc/PrivateSubnet2"
     }
    ],
    "VpcId": {
     "Ref": "testVpc4D2DC201"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PrivateSubnet2/RouteTable"
   }
  },
  "testVpcPrivateSubnet2RouteTableAssociationA640E9D6": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "testVpcPrivateSubnet2RouteTable11B7DEB0"
    },
    "SubnetId": {
     "Ref": "testVpcPrivateSubnet2Subnet5D361033"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PrivateSubnet2/RouteTableAssociation"
   }
  },
  "testVpcPrivateSubnet2DefaultRouteD3FF9B45": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "testVpcPublicSubnet2NATGateway7A297E8F"
    },
    "RouteTableId": {
     "Ref": "testVpcPrivateSubnet2RouteTable11B7DEB0"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/PrivateSubnet2/DefaultRoute"
   }
  },
  "testVpcIGWFEA83CE2": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "test-app-stack/test-Vpc"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/IGW"
   }
  },
  "testVpcVPCGWBF407B7A": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "InternetGatewayId": {
     "Ref": "testVpcIGWFEA83CE2"
    },
    "VpcId": {
     "Ref": "testVpc4D2DC201"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/VPCGW"
   }
  },
  "testVpcRestrictDefaultSecurityGroupCustomResource3530BF11": {
   "Type": "Custom::VpcRestrictDefaultSG",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E",
      "Arn"
     ]
    },
    "DefaultSecurityGroupId": {
     "Fn::GetAtt": [
      "testVpc4D2DC201",
      "DefaultSecurityGroup"
     ]
    },
    "Account": {
     "Ref": "AWS::AccountId"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-Vpc/RestrictDefaultSecurityGroupCustomResource/Default"
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ],
    "Policies": [
     {
      "PolicyName": "Inline",
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "ec2:AuthorizeSecurityGroupIngress",
          "ec2:AuthorizeSecurityGroupEgress",
          "ec2:RevokeSecurityGroupIngress",
          "ec2:RevokeSecurityGroupEgress"
         ],
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             "arn:",
             {
              "Ref": "AWS::Partition"
             },
             ":ec2:",
             {
              "Ref": "AWS::Region"
             },
             ":",
             {
              "Ref": "AWS::AccountId"
             },
             ":security-group/",
             {
              "Fn::GetAtt": [
               "testVpc4D2DC201",
               "DefaultSecurityGroup"
              ]
             }
            ]
           ]
          }
         ]
        }
       ]
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Role"
   }
  },
  "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
     },
     "S3Key": "ee7de53d64cc9d6248fa6aa550f92358f6c907b5efd6f3298aeab1b5e7ea358a.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "__entrypoint__.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0",
      "Arn"
     ]
    },
    "Runtime": {
     "Fn::FindInMap": [
      "LatestNodeRuntimeMap",
      {
       "Ref": "AWS::Region"
      },
      "value"
     ]
    },
    "Description": "Lambda function for removing all inbound/outbound rules from the VPC default security group"
   },
   "DependsOn": [
    "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0"
   ],
   "Metadata": {
    "aws:cdk:path": "test-app-stack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Handler",
    "aws:asset:path": "asset.ee7de53d64cc9d6248fa6aa550f92358f6c907b5efd6f3298aeab1b5e7ea358a",
    "aws:asset:property": "Code"
   }
  },
  "testEcsCluster6206D19C": {
   "Type": "AWS::ECS::Cluster",
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-EcsCluster/Resource"
   }
  },
  "testFargateServiceLBD27FFB0A": {
   "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
   "Properties": {
    "LoadBalancerAttributes": [
     {
      "Key": "deletion_protection.enabled",
      "Value": "false"
     }
    ],
    "Scheme": "internet-facing",
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "testFargateServiceLBSecurityGroup88A43275",
       "GroupId"
      ]
     }
    ],
    "Subnets": [
     {
      "Ref": "testVpcPublicSubnet1SubnetEE5AC508"
     },
     {
      "Ref": "testVpcPublicSubnet2Subnet51F857D4"
     }
    ],
    "Type": "application"
   },
   "DependsOn": [
    "testVpcPublicSubnet1DefaultRoute4E533896",
    "testVpcPublicSubnet1RouteTableAssociationB461B106",
    "testVpcPublicSubnet2DefaultRouteE5E707A9",
    "testVpcPublicSubnet2RouteTableAssociationE8652677"
   ],
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-FargateService/LB/Resource"
   }
  },
  "testFargateServiceLBSecurityGroup88A43275": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Automatically created Security Group for ELB testappstacktestFargateServiceLBA6A5DD0B",
    "SecurityGroupIngress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow from anyone on port 80",
      "FromPort": 80,
      "IpProtocol": "tcp",
      "ToPort": 80
     }
    ],
    "VpcId": {
     "Ref": "testVpc4D2DC201"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-FargateService/LB/SecurityGroup/Resource"
   }
  },
  "testFargateServiceLBSecurityGrouptotestappstacktestFargateServiceSecurityGroup757AA07E80814C7A05C3": {
   "Type": "AWS::EC2::SecurityGroupEgress",
   "Properties": {
    "Description": "Load balancer to target",
    "DestinationSecurityGroupId": {
     "Fn::GetAtt": [
      "testFargateServiceSecurityGroupA808F453",
      "GroupId"
     ]
    },
    "FromPort": 8081,
    "GroupId": {
     "Fn::GetAtt": [
      "testFargateServiceLBSecurityGroup88A43275",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "ToPort": 8081
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-FargateService/LB/SecurityGroup/to testappstacktestFargateServiceSecurityGroup757AA07E:8081"
   }
  },
  "testFargateServiceLBPublicListener8F000D2F": {
   "Type": "AWS::ElasticLoadBalancingV2::Listener",
   "Properties": {
    "DefaultActions": [
     {
      "TargetGroupArn": {
       "Ref": "testFargateServiceLBPublicListenerECSGroupC54101E4"
      },
      "Type": "forward"
     }
    ],
    "LoadBalancerArn": {
     "Ref": "testFargateServiceLBD27FFB0A"
    },
    "Port": 80,
    "Protocol": "HTTP"
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-FargateService/LB/PublicListener/Resource"
   }
  },
  "testFargateServiceLBPublicListenerECSGroupC54101E4": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "HealthCheckIntervalSeconds": 11,
    "HealthCheckPath": "/my-app",
    "HealthCheckTimeoutSeconds": 10,
    "HealthyThresholdCount": 2,
    "Port": 80,
    "Protocol": "HTTP",
    "TargetGroupAttributes": [
     {
      "Key": "stickiness.enabled",
      "Value": "false"
     },
     {
      "Key": "deregistration_delay.timeout_seconds",
      "Value": "5"
     }
    ],
    "TargetType": "ip",
    "UnhealthyThresholdCount": 2,
    "VpcId": {
     "Ref": "testVpc4D2DC201"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-FargateService/LB/PublicListener/ECSGroup/Resource"
   }
  },
  "testFargateServiceTaskDefTaskRoleDB6CA042": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-FargateService/TaskDef/TaskRole/Resource"
   }
  },
  "testFargateServiceTaskDefEA276C1F": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Essential": true,
      "Image": {
       "Fn::Join": [
        "",
        [
         {
          "Fn::Select": [
           4,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::ImportValue": "ecr-stack:ExportsOutputFnGetAttmyapp4ACA6506Arn8F184950"
             }
            ]
           }
          ]
         },
         ".dkr.ecr.",
         {
          "Fn::Select": [
           3,
           {
            "Fn::Split": [
             ":",
             {
              "Fn::ImportValue": "ecr-stack:ExportsOutputFnGetAttmyapp4ACA6506Arn8F184950"
             }
            ]
           }
          ]
         },
         ".",
         {
          "Ref": "AWS::URLSuffix"
         },
         "/",
         {
          "Fn::ImportValue": "ecr-stack:ExportsOutputRefmyapp4ACA6506C547FC53"
         },
         ":latest"
        ]
       ]
      },
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "testFargateServiceTaskDefmyappLogGroup65559E31"
        },
        "awslogs-stream-prefix": "test-FargateService",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Name": "my-app",
      "PortMappings": [
       {
        "ContainerPort": 8081,
        "Protocol": "tcp"
       }
      ]
     }
    ],
    "Cpu": "512",
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "testFargateServiceTaskDefExecutionRoleFF725E60",
      "Arn"
     ]
    },
    "Family": "testappstacktestFargateServiceTaskDef35514092",
    "Memory": "1024",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "testFargateServiceTaskDefTaskRoleDB6CA042",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-FargateService/TaskDef/Resource"
   }
  },
  "testFargateServiceTaskDefmyappLogGroup65559E31": {
   "Type": "AWS::Logs::LogGroup",
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-FargateService/TaskDef/my-app/LogGroup/Resource"
   }
  },
  "testFargateServiceTaskDefExecutionRoleFF725E60": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-FargateService/TaskDef/ExecutionRole/Resource"
   }
  },
  "testFargateServiceTaskDefExecutionRoleDefaultPolicy52FC8D12": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:BatchGetImage",
        "ecr:GetDownloadUrlForLayer"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::ImportValue": "ecr-stack:ExportsOutputFnGetAttmyapp4ACA6506Arn8F184950"
       }
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "testFargateServiceTaskDefmyappLogGroup65559E31",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "testFargateServiceTaskDefExecutionRoleDefaultPolicy52FC8D12",
    "Roles": [
     {
      "Ref": "testFargateServiceTaskDefExecutionRoleFF725E60"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-FargateService/TaskDef/ExecutionRole/DefaultPolicy/Resource"
   }
  },
  "testFargateServiceA657FFE8": {
   "Type": "AWS::ECS::Service",
   "Properties": {
    "Cluster": {
     "Ref": "testEcsCluster6206D19C"
    },
    "DeploymentConfiguration": {
     "MaximumPercent": 200,
     "MinimumHealthyPercent": 50
    },
    "DesiredCount": 1,
    "EnableECSManagedTags": false,
    "HealthCheckGracePeriodSeconds": 60,
    "LaunchType": "FARGATE",
    "LoadBalancers": [
     {
      "ContainerName": "my-app",
      "ContainerPort": 8081,
      "TargetGroupArn": {
       "Ref": "testFargateServiceLBPublicListenerECSGroupC54101E4"
      }
     }
    ],
    "NetworkConfiguration": {
     "AwsvpcConfiguration": {
      "AssignPublicIp": "DISABLED",
      "SecurityGroups": [
       {
        "Fn::GetAtt": [
         "testFargateServiceSecurityGroupA808F453",
         "GroupId"
        ]
       }
      ],
      "Subnets": [
       {
        "Ref": "testVpcPrivateSubnet1SubnetF113C9EA"
       },
       {
        "Ref": "testVpcPrivateSubnet2Subnet5D361033"
       }
      ]
     }
    },
    "TaskDefinition": {
     "Ref": "testFargateServiceTaskDefEA276C1F"
    }
   },
   "DependsOn": [
    "testFargateServiceLBPublicListenerECSGroupC54101E4",
    "testFargateServiceLBPublicListener8F000D2F",
    "testFargateServiceTaskDefTaskRoleDB6CA042"
   ],
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-FargateService/Service/Service"
   }
  },
  "testFargateServiceSecurityGroupA808F453": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "test-app-stack/test-FargateService/Service/SecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "testVpc4D2DC201"
    }
   },
   "DependsOn": [
    "testFargateServiceTaskDefTaskRoleDB6CA042"
   ],
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-FargateService/Service/SecurityGroup/Resource"
   }
  },
  "testFargateServiceSecurityGroupfromtestappstacktestFargateServiceLBSecurityGroupDC37BCCB80810AC14967": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "Description": "Load balancer to target",
    "FromPort": 8081,
    "GroupId": {
     "Fn::GetAtt": [
      "testFargateServiceSecurityGroupA808F453",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "testFargateServiceLBSecurityGroup88A43275",
      "GroupId"
     ]
    },
    "ToPort": 8081
   },
   "DependsOn": [
    "testFargateServiceTaskDefTaskRoleDB6CA042"
   ],
   "Metadata": {
    "aws:cdk:path": "test-app-stack/test-FargateService/Service/SecurityGroup/from testappstacktestFargateServiceLBSecurityGroupDC37BCCB:8081"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/31Sy27jMAz8lt4VbRKgH5Cm3SJAH0Zc9FrQMuOyUSRDpBwUhv+9sJzE3uxiT5wZDSmR1FIvbhd6fgNHnplyP7NU6DYXMHsFR/5o0Sx1+14btd6592ytslhYMnksHEqvjWjro+AbFBZHfdRWzN4QCHl3MffgYZP14QXkEQSP8K2yQA0IjoU3TjA4vBiGl5zYSgTM5wGdqBxNDCTfj8HHOr3hv8JDFZD5L3njkt4pNKzbtY0sGHrXGf6GUEHfFe/vcUeOzj1dK94JkMMw0U65OYaGzDCnAabrPmqQvlXWq7q2ZNK0njyUd2DBGSyv0tECCxnroSySg1zVLHX77+zUxB986iMWdCfPGU/O3yBUKJdBTminCA663fph7ylm3pJJixpQp6yvWLdPvrqUOOOuU1tkH0M/j8jiDyPduSl+hromV125suAbKjHcAaNaMaPkAlXy7dxrlDqmT7T2rkw76JTzJeov/tUs53pxq+c3X0w0C9EJHVBvh/gDyCoROhgDAAA="
   },
   "Metadata": {
    "aws:cdk:path": "test-app-stack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Mappings": {
  "LatestNodeRuntimeMap": {
   "af-south-1": {
    "value": "nodejs20.x"
   },
   "ap-east-1": {
    "value": "nodejs20.x"
   },
   "ap-northeast-1": {
    "value": "nodejs20.x"
   },
   "ap-northeast-2": {
    "value": "nodejs20.x"
   },
   "ap-northeast-3": {
    "value": "nodejs20.x"
   },
   "ap-south-1": {
    "value": "nodejs20.x"
   },
   "ap-south-2": {
    "value": "nodejs20.x"
   },
   "ap-southeast-1": {
    "value": "nodejs20.x"
   },
   "ap-southeast-2": {
    "value": "nodejs20.x"
   },
   "ap-southeast-3": {
    "value": "nodejs20.x"
   },
   "ap-southeast-4": {
    "value": "nodejs20.x"
   },
   "ap-southeast-5": {
    "value": "nodejs20.x"
   },
   "ap-southeast-7": {
    "value": "nodejs20.x"
   },
   "ca-central-1": {
    "value": "nodejs20.x"
   },
   "ca-west-1": {
    "value": "nodejs20.x"
   },
   "cn-north-1": {
    "value": "nodejs18.x"
   },
   "cn-northwest-1": {
    "value": "nodejs18.x"
   },
   "eu-central-1": {
    "value": "nodejs20.x"
   },
   "eu-central-2": {
    "value": "nodejs20.x"
   },
   "eu-north-1": {
    "value": "nodejs20.x"
   },
   "eu-south-1": {
    "value": "nodejs20.x"
   },
   "eu-south-2": {
    "value": "nodejs20.x"
   },
   "eu-west-1": {
    "value": "nodejs20.x"
   },
   "eu-west-2": {
    "value": "nodejs20.x"
   },
   "eu-west-3": {
    "value": "nodejs20.x"
   },
   "il-central-1": {
    "value": "nodejs20.x"
   },
   "me-central-1": {
    "value": "nodejs20.x"
   },
   "me-south-1": {
    "value": "nodejs20.x"
   },
   "mx-central-1": {
    "value": "nodejs20.x"
   },
   "sa-east-1": {
    "value": "nodejs20.x"
   },
   "us-east-1": {
    "value": "nodejs20.x"
   },
   "us-east-2": {
    "value": "nodejs20.x"
   },
   "us-west-1": {
    "value": "nodejs20.x"
   },
   "us-west-2": {
    "value": "nodejs20.x"
   }
  }
 },
 "Outputs": {
  "testFargateServiceLoadBalancerDNSA420B38F": {
   "Value": {
    "Fn::GetAtt": [
     "testFargateServiceLBD27FFB0A",
     "DNSName"
    ]
   }
  },
  "testFargateServiceServiceURLDA2D6A7C": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "http://",
      {
       "Fn::GetAtt": [
        "testFargateServiceLBD27FFB0A",
        "DNSName"
       ]
      }
     ]
    ]
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}